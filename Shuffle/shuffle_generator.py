#!/usr/bin/env python3

import numpy as np

from Shuffle.weak_generators import weak_generator_first as wg1
from Shuffle.weak_generators import weak_generator_second as wg2


class ShuffleGenerator:
    """
    Shuffles values produced by built-in generators to get higher quality generator.

    Work process:
     - Initializes array of random length filled with random numbers
     - Generating random number in range of array's length
     - Getting value on number generated on previous step, it's our result
     - Removing element responding to generated number from our array
     - Generating random number and appending it to the end of our array

    Usage:
     - Initiating generator instance:
     gen = ShuffleGenerator()
     - Getting value:
     var = gen.get_next()

    Attributes:
        ShuffleGenerator._Array - array of random numbers

    """

    def __init__(self):
        self._Array = np.random.rand(np.random.random_integers(1000, 5000))
        # Initializing array of random length with random float digits from [0, 1]

    def get_next(self):
        pop_number = np.random.random_integers(self._Array.__len__())
        # Generating random number and getting value responding this number to array
        res = self._Array[pop_number]

        self._Array = np.delete(self._Array, pop_number)
        # removing selected element from our array
        self._Array = np.append(self._Array, np.random.rand())
        # appending random number to the end of the array
        return res


class CombinedShuffleGenerator:
    """
    Shuffles values provided by generator functions passed to class to get higher quality generator.

    Work process:
     - Initializes array of 2000 zeros and fills it with values generated by the first function
     - Generating random number with help of second function in range of array's length
     - Getting value on number generated on previous step, it's our result
     - Removing element responding to generated number from our array
     - Generating random number with first function and appending it to the end of our array

    Usage:
     - Initiating generator instance:
    gen = CombinedShuffleGenerator(first_generator_function, second_generator_function)
     - Getting value:
     var = gen.get_next()

    Attributes:
        CombinedShuffleGenerator._Array - array of random numbers
        CombinedShuffleGenerator.foo1 - first of passed functions
        CombinedShuffleGenerator.foo2 - second of passed functions
    """

    def __init__(self, foo1, foo2):
        if callable(foo1) and callable(foo2):           # we should raise error if what we've
            pass                                        # got is not a function
        else:
            raise TypeError("Was expected to get functions as arguments")

        self.foo1, self.foo2 = foo1, foo2
        self._Array = np.asarray(list(map(lambda x: self.foo1(), np.zeros(2000))))   # generating array

    def get_next(self):
        pop_number = self.foo2()
        res = self._Array[pop_number]

        self._Array = np.delete(self._Array, pop_number)
        self._Array = np.append(self._Array, self.foo1())
        return res


if __name__ == '__main__':
    shuffle = ShuffleGenerator()
    print(shuffle.__doc__)

    for i in range(100):
        print(shuffle.get_next())
